Cracking the Coding Interview

Chapter 2 Interview Questions

1 Write code to remove duplicates from an unsorted linked list.
    *Follow up: How would you soleve this problem if a temporary buffer is not allowed?


2 Implement an algorithm to find the kth to last element of a singly linked list


3 Implement an algorithm to delete a node in the middle of a singly linked list, given only
  access to that node.
    *Example:
      Input: the node c from the linked list a->b->c->d->e
      Result: nothing is returned, but the new list looks like a->b->d->e


4 Write code to partition a linked list around a value x, such that all nodes less than x come
  before all nodes greater than or equal to x.


5 You have two numbers represented by a linked list, where each node contains a single digit.
  The digits are stored in reverse order, such that the 1's digit is at the head of the list.
  Write a function that adds the two numbers and returns the sum as a linked list.
    *Example:
      Input: (7 -> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295.
      Output: 2 -> 1 -> 9. That is, 912.
    *Follow up: Suppose the digits are stored in forward order. Repeat the above problem.


6 Given a circular linked list, implement an algorithm which returns the node at the beginning
  of the loop.
    *Definition: Circular linked list: A (corrup) linked list in which a node's next pointer
      points to an earlier node, so as to make a loop in the linked list.
    *Example:
      Input: A -> B -> C -> D -> E -> C [the same C as earlier]
      Output: C


7 Implement a function to check if a linked list is a palindrome.


